apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


def keyProps = new Properties()
def keyPropsFile = rootProject.file('keystore/keystore.properties')
if (keyPropsFile.exists()) {
    keyProps.load(new FileInputStream(keyPropsFile))
}

def versionProps = new Properties()
def versionPropsFile = rootProject.file('version.properties')
if (versionPropsFile.exists()) {
    versionProps.load(new FileInputStream(versionPropsFile))
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.potato.timetable"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode versionProps['versionCode'].toInteger()
        versionName versionProps['versionName']
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding true
    }
    // 签名
    signingConfigs {
        release {
            keyAlias keyProps['keyAlias']
            keyPassword keyProps['keyPassword']
            storeFile keyProps['storeFile'] ? file(keyProps['storeFile']) : null
            storePassword keyProps['storePassword']
        }
    }

    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
//        debug {
//            shrinkResources true
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }

    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
//    android.applicationVariants.all {
//        variant ->
//            variant.outputs.all {
//                //在这里修改apk文件名
//                outputFileName = "LightTimetable-v${variant.versionName}-${buildTime()}.apk"
//            }
//    }
}

def static buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd', TimeZone.getTimeZone("GMT+08:00"))
    return formattedDate
}
//
//def static createReleaseVersion(int versioncode, String name) {
//    File file = new File(".\\app\\release", "version.json")
//    BufferedWriter bw = new BufferedWriter(new FileWriter(file))
//    bw.write("{" +
//            "\"versionCode\":" + versioncode +
//            ",\"releaseName\":\"" + name + "\"" +
//            "}")
//    bw.flush()
//    bw.close()
//}

dependencies {
    // 引入kotlin
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.alibaba:fastjson:1.2.78'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.1.+'
    //banner依赖
    implementation 'com.youth.banner:banner:1.4.9'
    //Glide框架
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    implementation 'com.github.Chrisvin:FlipTabs:v1.5'
    implementation 'com.contrarywind:Android-PickerView:4.1.8'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'net.sourceforge.jexcelapi:jxl:2.6.12'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'org.jsoup:jsoup:1.7.3'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'cn.yipianfengye.android:zxing-library:2.2'
    implementation 'com.qmuiteam:qmui:2.0.0-alpha10'
    implementation 'com.github.lihangleo2:ShadowLayout:3.1.1'
    implementation 'com.android.support:appcompat-v7:23.+'


// 注意：分包之后不会有默认的Header和Footer需要手动添加！还是原来的三种方法！
    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation  'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation  'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    implementation  'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    implementation  'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    implementation  'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    implementation  'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    implementation  'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载

    // 内存泄漏检测
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'
}
